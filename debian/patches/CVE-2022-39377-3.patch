From 44f1dc159242c1e434a3b836cda49f084c5a96cc Mon Sep 17 00:00:00 2001
From: Sebastien GODARD <sysstat@users.noreply.github.com>
Date: Sun, 6 Nov 2022 15:48:16 +0100
Subject: [PATCH] Make sure values to be compared are unsigned integers

It seems safer to make sure that input values are unsigned int before
casting them to unsigned long long and making the comparison.

Signed-off-by: Sebastien GODARD <sysstat@users.noreply.github.com>
---
 common.c    | 10 ++++++----
 common.h    |  2 +-
 sa_common.c | 10 +++++-----
 sadc.c      |  6 +++---
 4 files changed, 15 insertions(+), 13 deletions(-)

--- a/common.c
+++ b/common.c
@@ -441,13 +441,15 @@ int check_dir(char *dirname)
  * @val3	Third value.
  ***************************************************************************
  */
-void check_overflow(unsigned long long val1, unsigned long long val2,
-		    unsigned long long val3)
+void check_overflow(unsigned int val1, unsigned int val2,
+		    unsigned int val3)
 {
-	if (val1 * val2 * val3 > UINT_MAX) {
+	if ((unsigned long long) val1 * (unsigned long long) val2 *
+	    (unsigned long long) val3 > UINT_MAX) {
 #ifdef DEBUG
 		fprintf(stderr, "%s: Overflow detected (%llu). Aborting...\n",
-			__FUNCTION__, val1 * val2 * val3);
+			__FUNCTION__, (unsigned long long) val1 * (unsigned long long) val2 *
+			(unsigned long long) val3);
 #endif
 	exit(4);
 		}
--- a/common.h
+++ b/common.h
@@ -254,7 +254,7 @@ int get_wwnid_from_pretty
 int check_dir
 	(char *);
 void check_overflow
-	(unsigned long long, unsigned long long, unsigned long long);
+	(unsigned int, unsigned int, unsigned int);
 
 #ifndef SOURCE_SADC
 int count_bits
--- a/sa_common.c
+++ b/sa_common.c
@@ -452,9 +452,9 @@ void allocate_structures(struct activity
 		if (act[i]->nr_ini > 0) {
 
 			/* Look for a possible overflow */
-			check_overflow((unsigned long long) act[i]->msize,
-				       (unsigned long long) act[i]->nr_ini,
-				       (unsigned long long) act[i]->nr2);
+			check_overflow((unsigned int) act[i]->msize,
+				       (unsigned int) act[i]->nr_ini,
+				       (unsigned int) act[i]->nr2);
 
 			for (j = 0; j < 3; j++) {
 				SREALLOC(act[i]->buf[j], void,
@@ -520,8 +520,8 @@ void reallocate_all_buffers(struct activ
 	}
 
 	/* Look for a possible overflow */
-	check_overflow((unsigned long long) a->msize, nr_realloc,
-		       (unsigned long long) a->nr2);
+	check_overflow((unsigned int) a->msize, (unsigned int) nr_realloc,
+		       (unsigned int) a->nr2);
 
 	for (j = 0; j < 3; j++) {
 		SREALLOC(a->buf[j], void,
--- a/sadc.c
+++ b/sadc.c
@@ -354,9 +354,9 @@ void sa_sys_init(void)
 		if (IS_COLLECTED(act[i]->options) && (act[i]->nr_ini > 0)) {
 
 			/* Look for a possible overflow */
-			check_overflow((unsigned long long) act[i]->msize,
-				       (unsigned long long) act[i]->nr_ini,
-				       (unsigned long long) act[i]->nr2);
+			check_overflow((unsigned int) act[i]->msize,
+				       (unsigned int) act[i]->nr_ini,
+				       (unsigned int) act[i]->nr2);
 
 			/* Allocate structures for current activity (using nr_ini and nr2 results) */
 			SREALLOC(act[i]->_buf0, void,
